//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    bool isParenthesisBalanced(string& s) 
    {
        // code here
        stack<char> temp;
        
        for(int i=0;i<s.length();i++)
        {
            if(temp.empty()) //if empty then start pushing
            {
                temp.push(s[i]);
            }
            else if((temp.top() == '(' && s[i] == ')') 
                || (temp.top() == '{' && s[i] == '}')
                || (temp.top() == '[' && s[i] == ']'))
            {
                temp.pop(); //remove pairs
            }
            else
            {
                temp.push(s[i]); //else keep pushing
            }
        }
        
        
        if(temp.empty())
        {
            return true; //if stack empty
        }
        else
        {
            return false;
        }
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    string a;
    cin >> t;
    while (t--) {
        cin >> a;
        Solution obj;
        if (obj.isParenthesisBalanced(a))
            cout << "true" << endl;
        else
            cout << "false" << endl;

        cout << "~"
             << "\n";
    }
}
// } Driver Code Ends
