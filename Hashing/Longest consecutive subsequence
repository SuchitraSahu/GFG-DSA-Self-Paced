//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class Solution {
  public:

    // Function to return length of longest subsequence of consecutive integers.
    int findLongestConseqSubseq(vector<int>& arr) {
        // Your code here
        //set<int> s(arr.begin(), arr.end();
        set<int> s;
        int n = arr.size();
        int longest = 0;
        for(int i=0;i<n;i++)
        {
            s.insert(arr[i]);
        }
        
        
        for(num : s)
        {
            //For each element num in the set, you check if num - 1 exists.
            // If it doesnâ€™t, num is the start of a new sequence.
            if(s.find(num-1)==s.end()) //If num-1 doesn't exist, num is the start
            {
                int curr_num =  num; // now num is start
                int count  = 1;
            
                //length counting
                while(s.find(curr_num+1)!=s.end()) //checks if next num there 
                {
                    curr_num+=1;
                    count+=1;
                }
            
                longest = max(longest,count);
                
            }
        }
        
        
        return longest;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;

        // Read first array
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        int res = ob.findLongestConseqSubseq(arr);

        cout << res << endl;
    }
    return 0;
}

// } Driver Code Ends
